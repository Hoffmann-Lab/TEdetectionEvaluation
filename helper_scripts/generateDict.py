#!/gsc/biosw/bin/python3.7
# This script generates a table with the TE id created by myself
# and that ones generated by SQuIRE. This table can be used to translate
# the TE ids in the evaluation step

import sys
from collections import defaultdict

def delEntry(array, pos):
    
    return array[:pos] + array[pos+1:]

def readBed(bedFile):
    
    with open(bedFile, "r") as input_handle:

        for line in input_handle:
            yield line


def getID(line):
    
    return line.split("\t")[3]

def generateKey(teid):

    teid = teid.split("|")

    if teid[1] == "+" or teid[1] == "-":
        
        teid = delEntry(teid, 1)

        key = ''.join(teid[0:3])

    else:

        key = ''.join(teid[0:3])
    
    return key

def addToDict(dictonary, teid, tool):

    key = generateKey(teid)
    
    if key in dictonary.keys():

        dictonary[key][tool] = teid

    else:

        dictonary[key] = {"squire" : None, "myAnno" : None}
        
        dictonary[key][tool] = teid



def generateDictTable(dictionary):
    
    with open("squireMyAnnoDict.csv", "w") as output_handle:

        output_handle.write("Squire.Annotation\tMy.Annoataion\n")

        for teid in dictionary:
        
            ids = dictionary[teid]

            squireID = ids["squire"]
            myID = ids["myAnno"]
            output_handle.write("{}\t{}\n".format(squireID, myID))

def main():

    files = {'squire': sys.argv[1], 'myAnno': sys.argv[2]}
    dictionary = defaultdict(list)
    
    for key in files:
    
        file = readBed(files[key])

        for line in file:

            addToDict(dictionary, getID(line), key)

    generateDictTable(dictionary)
if __name__ == "__main__":

    main()


